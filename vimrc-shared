" -----------------------------------------------------------------------------
" Shared vimrc configuration
" -----------------------------------------------------------------------------

set autoindent                 " copy indent from current line when starting a new line
set autoread                   "autoreload the file if is has been changed outside Vim
set backspace=indent,eol,start " Allows you to backspace to the left of the Insert mode entry character
set cmdheight=2                " give more space for displaying messages
set complete-=i                " related to ctrl-p completion - see h: set complete
set cursorline                 " highlight current line - this may slow down performance
set cpo-=J                     " sets the definition of a sentence to be one space after the period - for two spaces use set cpo+=J
set encoding=utf-8             " set encoding to UTF-8 (default was "latin1")
set expandtab smarttab         " convert <TAB> key-presses to spaces
set filetype=on
set hidden                     " It hides buffers instead of closing them. This means that you can have unwritten changes to a file and open a new file using :e, without being forced to write or undo your changes first.
set history=10000
set hlsearch                   " highlight search matches
set incsearch                  " search as characters are entered, which is incremental search
set laststatus=2               " always show statusline (even with only single window)
set lazyredraw                 " redraw screen only when we need to
set linespace=2
set listchars=tab:Δ\ ,eol:¬
set matchpairs+=<:>            " Use % to jump between pairs 
set more                     " Avoids breaking up a long listing into screens with --- more ---
set number                     " show line numbers
set mouse=a                    " enable mouse support (might not work well on Mac OS X)
set nobackup
set nocompatible               " This should be set by default in Vim8, but just in case
set nocp
set nostartofline
set noswapfile
set nowrap                     " do not wrap lines
set numberwidth=6              " sets the gutter width
set regexpengine=1
set relativenumber             " set relative line numbers
set ruler                      " show line and column number of the cursor on right side of statusline
set scrolloff=3                " keep three lines between the cursor and the edge of the screen
set shiftwidth=2               " number of spaces to use for each step of (auto)indent
set shortmess=I                " turns off Bram's message on start-up (I)
set showcmd
set sidescroll=1               " scrolls the window left/right to see text outside the window
set noshowmatch                  "turn off highlight matching parentheses / brackets [{()}]
set showmode
set smartcase
set smartindent                " even better autoindent (e.g. add indent after '{')
set smarttab
set softtabstop=2       " backspace after pressing <TAB> will remove up to this many spaces
set spelllang=en_us
set splitbelow
set splitright
set tabstop=2                  " width that a <TAB> character displays as
set textwidth=0
set timeoutlen=500
set ttyfast
set updatetime=4000            " related to when a swapfile is written default is 4 s which can cause delays - swapfile currently off
" set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v] " statusline comes from airline settings
" set statusline=%t%=[%{strlen(&fenc)?&fenc:'none'},%{&ff}]\ %h%m%r%y\ %c\ %l/%L\ %P
set undofile
set wildmenu                   " visual autocomplete for command menu
set wildmode=list:longest,full

" -----------------------------------------------------------------------------
" Colorscheme 
" -----------------------------------------------------------------------------

" let g:gruvbox_contrast_dark = 'medium'

" colorscheme gruvbox
colorscheme pencil
set background=light

" -----------------------------------------------------------------------------
" Cursor line - see gvimrc for other cursor line settings
" -----------------------------------------------------------------------------

" shows/hides cursor line when switching modes
:autocmd InsertEnter,InsertLeave * set cul!

" -----------------------------------------------------------------------------
" File Types
" -----------------------------------------------------------------------------

" xml.vim ftplugin mappings - must come before the filetype plugin command
" Enables tag closing for hr, br etc in HTML 
let xml_use_xhtml = 1

" -----------------------------------------------------------------------------
" Syntax highlighting and indenting
" -----------------------------------------------------------------------------

syntax enable

" Detect filetypes and run language-specific plugins in the ftplugin folder
filetype plugin indent on

" -----------------------------------------------------------------------------
" IndentLine plugin mappings - not sure this is being used
" -----------------------------------------------------------------------------

let g:indentLine_setColors = 0
let g:indentLine_char_list = ['|']
map <silent> <F9> :let IndentLinesToggle

" -----------------------------------------------------------------------------
" vim plugins autocorrection filetypes
" -----------------------------------------------------------------------------

let g:correction_filetypes = [
  \ 'text', 'markdown', 'gitcommit', 'xml', 'html',
  \ 'asciidoc', 'pandoc' ]

" -----------------------------------------------------------------------------
" Basic mappings
" -----------------------------------------------------------------------------

" set the mapleader - must appear before any leader mappings
let mapleader = " "
let g:mapleader = " "

" turn off search highlighting with <CR> (carriage-return)
nnoremap <CR> :nohlsearch<CR><CR>

" map Esc key alternative to jk and kj for insert mode and visual mode
inoremap jk <esc>
inoremap kj <esc>
xnoremap jk <esc>
xnoremap kj <esc>
" map the ENTER key to switch back to Normal mode from Insert and Visual
" Use Caps Lock ENTER (mapped to Ctrl) to add a line return from Insert mode
" inoremap <ENTER> <esc>
" xnoremap <ENTER> <esc>

" Shortcuts for changing the window focus
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" delete last word in Insert mode with ctrl-backspace to match standard Windows behavior
" inoremap <C-BS> <ESC>diw <C-O>
inoremap <C-BS> <C-W>

" move among buffers
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> [B :blast<CR>
" Toggles between last viewed buffer
nnoremap <silent> <F2> :b#<CR>

" Remapping of alt-j, alt-k to move lines up and down
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <esc>:m .+1<CR>==gi
inoremap <A-k> <esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" use tab to move around to bracket pairs
nnoremap <tab> %
vnoremap <tab> %

" splits the line on a character in Normal mode when pressing s
nnoremap <leader>s i<CR><ESC>

" open _vimrc file with ,ev (leader edit vim)
"nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
map <leader>ev :tabnew $MYVIMRC<CR>

" open a new vertical split and switch over to it
nnoremap <leader>v <C-w>v<C-w>l

" Open a new empty tab
nnoremap <leader>a :tabnew<CR>

" -----------------------------------------------------------------------------
" Spell checking
" -----------------------------------------------------------------------------

" Toggle spell check.
map <F7> :setlocal spell!<CR>

" Spelling mistakes will also be colored red if you uncomment the colors.
hi SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
hi SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
hi SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
" hi SpellCap cterm=underline ctermfg=203 guifg=DarkMagenta

" Use F8 to toggle relative line numbers and regular line numbers.
nmap <F8> :set invrelativenumber<CR>

" Use F4 to remove trailing whitespace without removing empty lines
:nnoremap <silent> <F4> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" Toggle quickfix window.
function! QuickFix_toggle()
    for i in range(1, winnr('$'))
        let bnum = winbufnr(i)
        if getbufvar(bnum, '&buftype') == 'quickfix'
            cclose
            return
        endif
    endfor

    copen
endfunction
nnoremap <silent> <Leader>c :call QuickFix_toggle()<CR>

" -----------------------------------------------------------------------------
" Basic autocommands
" -----------------------------------------------------------------------------

" Update a buffer's contents on focus if it changed outside of Vim.
au FocusGained,BufEnter * :checktime

" Unset paste on InsertLeave.
" autocmd InsertLeave * silent! set nopaste

" Only show the cursor line in the active buffer.
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" -----------------------------------------------------------------------------
" Opening window size
" -----------------------------------------------------------------------------

" winpos 1020 500
" winsize 140 50
 winpos 1300 300
 winsize 120 40

" -----------------------------------------------------------------------------
" Airline settings
" -----------------------------------------------------------------------------
"
let g:airline_theme='dark'
" let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline#extensions#capslock#symbol = 'CAPS'
" let g:airline_extensions_anzu_enabled = 1
" statusline for vim-anzu - not sure if this does anything with airline
" set statusline=%{anzu#search_status()}

" -----------------------------------------------------------------------------
" Insert date and time
" -----------------------------------------------------------------------------

" Insert date and time in normal and insert modes:
:nnoremap <F6> "=strftime("%Y-%m-%d %H:%M")<CR>P
:inoremap <F6> <C-R>=strftime("%Y-%m-%d %H:%M")<CR>

" Insert date in normal and insert modes:
:nnoremap <F5> "=strftime("%Y-%m-%d")<CR>P
:inoremap <F5> <C-R>=strftime("%Y-%m-%d")<CR>

" -----------------------------------------------------------------------------
" Copy file paths
" -----------------------------------------------------------------------------

" Copies the current file path from present working directory onwards to the unnamed register so you can paste with p
:nmap cp :let @" = expand("%")<CR>

" Copies the current complete file path to the unnamed register so you can paste with p
:nmap cP :let @" = expand("%:p")<CR>

" -----------------------------------------------------------------------------
" Pretty print formatting
" -----------------------------------------------------------------------------

" pretty print for use with HTML Tidy
command! TidyHTML !tidy -mi -html -wrap 0 %
"command! XMLlint %!xmllint % --format
" Validate against DITA DTDs when XML file is inside the dtd folder that contains the dtd for the topic type, and the directory is set to the working directory, and the entire higher level set of dtds is present
command! DITAvalidlocal %!xmllint % --valid --noout
" command! DITAvalid !xmllint % --valid  C:\Users\mark.beresford\Documents\myfiles\projects-writing\dtd\technicalContent\dtd\concept.dtd --noout
" Validate against DTDs using catalog file - not sure if this works need to test
command! DITAvalidlocal %!xmllint % --valid --catalogs --noout command! TidyXML !tidy -mi -xml -wrap 0 %

" -----------------------------------------------------------------------------
" Plugin settings, mappings and autocommands
" -----------------------------------------------------------------------------

"" .............................................................................
" Ctags
" .............................................................................

nmap <F9> :TagbarToggle<CR>

" ............................................................................. .............................................................................
" FZF plugin mappings
" .............................................................................

"let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let $FZF_DEFAULT_OPTS='--reverse'

" Mappings for fzf for finding buffers, files, and tags
nmap <Leader>b :Buffers<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>t :Tags<CR>

" If installed using git
Plug '~/.fzf'

" .............................................................................
" ctags tagbar toggle
" .............................................................................

nmap <F9> :TagbarToggle<CR>

" .............................................................................
" Prettier
" .............................................................................

" Prettier autoformat on save
let g:prettier#autoformat_require_pragma = 0

" .............................................................................
" incsearch plugin settings
" .............................................................................

" hide highlights after moving the cursor following a search - works with hlsearch setting set above
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" .............................................................................
" unblevable/quick-scope
" .............................................................................

" Trigger a highlight in the appropriate direction when pressing these keys.
let g:qs_highlight_on_keys=['f', 'F', 't', 'T']

augroup qs_colors
  autocmd!
  autocmd ColorScheme * highlight QuickScopePrimary guifg='#af005f' gui=underline ctermfg=155 cterm=underline
  autocmd ColorScheme * highlight QuickScopeSecondary guifg='#0087ff' gui=underline ctermfg=81 cterm=underline
augroup END

" .............................................................................
" sneak.vimunblevable/quick-scope
" .............................................................................

let g:sneak#label = 1

" .............................................................................
" habamax/asciidoctor plugin settings
" .............................................................................

" Fold sections, default `0`.
let g:asciidoctor_folding = 1

" Fold options, default `0`.
let g:asciidoctor_fold_options = 2

" What to use for HTML, default `asciidoctor`.
let g:asciidoctor_executable = 'asciidoctor'

" What extensions to use for HTML, default `[]`.
let g:asciidoctor_extensions = ['asciidoctor-diagram', 'asciidoctor-rouge']

" Path to the custom css - turned off so I can specify as a file attribute
" let g:asciidoctor_css_path = 'C:\Users\echo\Documents\notes\css'

" Custom css name to use instead of built-in - turned off so I can specify as a file attribute
" let g:asciidoctor_css = 'asciidoctor-wide.css'

" Conceal *bold*, _italic_, `code` and urls in lists and paragraphs, default `0`.
" See limitations in end of the README
let g:asciidoctor_syntax_conceal = 0

" Highlight indented text, default `1`.
let g:asciidoctor_syntax_indented = 1

" Function to create buffer local mappings and add default compiler
fun! AsciidoctorMappings()
    nnoremap <buffer> <leader>oo :AsciidoctorOpenRAW<CR>
    nnoremap <buffer> <leader>op :AsciidoctorOpenPDF<CR>
    nnoremap <buffer> <leader>oh :AsciidoctorOpenHTML<CR>
    nnoremap <buffer> <leader>ox :AsciidoctorOpenDOCX<CR>
    nnoremap <buffer> <leader>ch :Asciidoctor2HTML<CR>
    nnoremap <buffer> <leader>cp :Asciidoctor2PDF<CR>
    nnoremap <buffer> <leader>cx :Asciidoctor2DOCX<CR>
    nnoremap <buffer> <leader>p :AsciidoctorPasteImage<CR>
    " :make will build pdfs
    compiler asciidoctor2pdf
endfun

" Call AsciidoctorMappings for all `*.adoc` and `*.asciidoc` files
augroup asciidoctor
    au!
    au BufEnter *.adoc,*.asciidoc call AsciidoctorMappings()
augroup END

" .............................................................................
" ALE plugin settings
" .............................................................................

let g:ale_html_tidy_executable = "C:\Program Files\tidy-5.6.0-vc14-64b\bin\tidy.exe"
" Maybe need to turn off tidy here and in the html linters section below if it reports an error.

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\   'html': ['tidy', 'prettier'],
\   'css': ['stylelint', 'prettier'],
\   'xml': ['xmllint'],
\}

let g:ale_fix_on_save = 0       " Use 1 to activate - run :ALEFix instead if you want to manually fix a file
let g:ale_linters_explicit = 1
let g:ale_lint_on_text_changed = 'never'   " Only activate on save
let g:ale_lint_on_enter = 0    " start when GVim starts = 1. to turn it off use 0
let g:ale_sign_column_always = 1 " 1 keeps the sign column open at all times

let g:ale_linters = {
 \   'css': ['stylelint', 'prettier'],
 \   'html': ['tidy', 'prettier'],
 \   'javascript': ['eslint'],
 \   'xml': ['xmllint'],
 \}

" let g:CSSLint_FileTypeList = ['css', 'less', 'sass'] " Activates csslint for use in Vim with css files - using stylelint
let g:ale_set_highlights = 0  " 1 allows highlights for text symbols in the column, 0 disables
" highlight ALEWarning ctermbg=DarkMagenta

let g:ale_sign_error = 'x'
" let g:ale_sign_warning = '!'
" let g:ale_sign_error = '⚠️' "Less aggressive than the default '>>'
" let g:ale_sign_error = '▲'
let g:ale_sign_warning = '💡'
"let g:ale_echo_msg_warning_str = 'Warning 📣'
"let g:ale_echo_msg_error_str = '❧ Error'
" highlight clear ALEErrorSign
" highlight clear ALEWarningSign
let g:ale_open_list = 1  "  can be useful if combining ALE with another plugin
let g:ale_keep_list_window_open = 1

" Bind F12 to fixing problems with ALE
nmap <F12> <Plug>(ale_fix)

" .............................................................................
" lambdalisue/fern.vim plugin settings
" .............................................................................

" Disable netrw.
let g:loaded_netrw  = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_netrwFileHandlers = 1

augroup my-fern-hijack
  autocmd!
  autocmd BufEnter * ++nested call s:hijack_directory()
augroup END

function! s:hijack_directory() abort
  let path = expand('%:p')
  if !isdirectory(path)
    return
  endif
  bwipeout %
  execute printf('Fern %s', fnameescape(path))
endfunction

" Custom settings and mappings.
let g:fern#disable_default_mappings = 1

noremap <silent> <Leader>n :Fern %:h -reveal=% -drawer -toggle -width=45<CR><C-w>l

function! FernInit() abort
  nmap <buffer><expr>
        \ <Plug>(fern-my-open-expand-collapse)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open:select)",
        \   "\<Plug>(fern-action-expand)",
        \   "\<Plug>(fern-action-collapse)",
        \ )
  nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> n <Plug>(fern-action-new-path)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> M <Plug>(fern-action-rename)
  nmap <buffer> h <Plug>(fern-action-hidden-toggle)
  nmap <buffer> r <Plug>(fern-action-reload)
  nmap <buffer> s <Plug>(fern-action-mark-toggle)
  nmap <buffer> b <Plug>(fern-action-open:split)
  nmap <buffer> v <Plug>(fern-action-open:vsplit)
  nmap <buffer><nowait> < <Plug>(fern-action-leave)
  nmap <buffer><nowait> > <Plug>(fern-action-enter)
endfunction

augroup FernGroup
  autocmd!
  autocmd FileType fern call FernInit()
augroup END

" -----------------------------------------------------------------------------
" Yggdroot/indentLine settings
" -----------------------------------------------------------------------------

" let g:indentLine_char = '|'
let g:indentLine_first_char = ''
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_setColors = 1

" Quickfix list
" -----------------------------------------------------------------------------

" Navigate quickfix list with ease
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]q :cnext<CR>

" -----------------------------------------------------------------------------
" Autocomplete
" -----------------------------------------------------------------------------

" autocloses html and xml tags
inoremap ><Tab> ><Esc>F<lyt>o</<C-r>"><Esc>O<Space>

" -----------------------------------------------------------------------------
" XML
" -----------------------------------------------------------------------------

map <Leader>x :set filetype=xml<CR>
  \:source $VIMRUNTIME/syntax/xml.vim<CR>
  \:set foldmethod=syntax<CR>
  \:source $VIMRUNTIME/syntax/syntax.vim<CR>
  \:source $ADDED/xml.vim<CR>
  \:iunmap <buffer> <Leader>.<CR>
  \:iunmap <buffer> <Leader>><CR>
  \:inoremap \> ><CR>
  \:echo "XML mode is on"<CR>
  " no imaps for <Leader>
  "\:inoremap \. ><CR>

command! XMLlint %!xmllint % --format
command! DITAvalid %!xmllint % --valid --noout                
command! DITAvalidcat %!xmllint % --valid --catalogs --noout " This is not currently working

" catalog should be set up
nmap <Leader>l <Leader>cd:%w !xmllint --valid --noout -<CR>
nmap <Leader>r <Leader>cd:%w !rxp -V -N -s -x<CR> " I don't know what this does, copied from pink juice
nmap <Leader>dvc :%w !xmllint --noout --dtdvalid "http://scitechcontentservices.com/dtd/concept.dtd"<CR>

vmap <Leader>px !xmllint --format -<CR>
nmap <Leader>px !!xmllint --format -<CR>
nmap <Leader>pxa :%!xmllint --format -<CR>

nmap <Leader>i :%!xsltlint<CR>

" -----------------------------------------------------------------------------
" Enable use of standard Windows copy and paste commands
" -----------------------------------------------------------------------------

" use ctrl-c in normal and visual modes to store in the Windows clipboard
nnoremap <C-c> "+y
vnoremap <C-c> "+y

" while in any Vim mode, use ctrl-p to paste into Vim from the Windows clipboard
map <C-p> "+p

" use ctrl-x in normal and visual modes of Vim to cut and store in the Windows clipboard
map <C-x> "+x

" exchange word under cursor with the next word without moving the cursor
" nnoremap gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o><C-l>
nnoremap gw dawwP

" push word under cursor to the left
nnoremap <leader><Left> "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o><C-l>

" push word under cursor to the right
nnoremap <leader><Right> "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o>/\w\+\_W\+<CR><C-l>

" -----------------------------------------------------------------------------
" Set current directory on the fly
" -----------------------------------------------------------------------------

" This setting must be at toward the bottom for it to work.
" It maps cd to change the working directory to the directory of active file
" nnoremap <leader>cd :cd %:p:h<CR>
nnoremap <leader>cd :lcd %:h<CR>

" F3 following a :g/pattern result puts the result into a new window
nnoremap <silent> <F3> :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR>

noremap <leader>dt a<?xml version="1.0" encoding="utf-8"?><CR><!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd"><CR><task id="abcd"><CR><taskbody><CR><title>Title</title><CR></taskbody><CR></task><ESC>
noremap <leader>dc a<?xml version="1.0" encoding="utf-8"?><CR><!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"><CR><concept id="abcd"><CR><conbody><CR><title>Title</title><CR></conbody><CR></concept><ESC>
noremap <leader>ht a<!DOCTYPE html><CR><html><CR><head><CR><title>Title</title><CR><link rel="stylesheet" href="style.css"><CR></head><CR><body><CR><h1>Heading1</h1><CR></body><CR></html><ESC>

" -----------------------------------------------------------------------------
" GVim-specific settings
" -----------------------------------------------------------------------------

if has("gui_running")

" set guioptions-=T " Removes top toolbar
set guioptions=rb " sets the right and bottom scrollbars and hides the menubar due to a missimg m
set guitablabel=%N\ %t\ %M  " Sets the syntax of the tab label to a tab number and the filename of the current window.

highlight CursorLineNr gui=bold guifg=#ffffff guibg=#c0d0e0

" Normal mode cursor - may be overridden by colorscheme
highlight nCursor guifg=white guibg=steelblue

" Insert mode cursor - may be overridden by colorscheme
highlight iCursor guifg=white guibg=steelblue

" sets the Normal, Visual, Command mode cursors to block
set guicursor=n-v-c:block-Cursor-blinkon0

" sets the Insert mode cursor to an I bar
" set guicursor=i:ver30-iCursor-blinkwait3000

" sets the Insert mode cursor to block
set guicursor=i:block-Cursor

" set guifont=Monoid:h13:cANSI:qDRAFT
set guifont=Roboto_Mono:h14:W300
" set guifont=Input_Mono:h14:W300
"
set encoding=utf-8
set linespace=2
set sidescroll=1 " scrolls the window left/right to see text outside the window

endif
